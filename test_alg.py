import time
import tracemalloc
import pandas as pd

def universal_test_system(solutions_dict, test_cases_dict):

    all_results = []
    
    for task_name, solution_func in solutions_dict.items():
        test_cases = test_cases_dict.get(task_name, [])
        
        print(f"\n{'='*60}")
        print(f"üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: {task_name}")
        print(f"{'='*60}")
            
        for i, test_case in enumerate(test_cases, 1):
            print(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ {i}...")
            
            input_data = test_case.get('input', test_case)
            expected = test_case.get('expected')
            
            result = None
            execution_time = 0
            memory_mb = 0
            correctness = 'ERROR'
            error_msg = None
            
            try:
                tracemalloc.start()
                start_time = time.time()
                
                if isinstance(input_data, (list, tuple)):
                    result = solution_func(*input_data)
                elif isinstance(input_data, dict):
                    result = solution_func(**input_data)
                else:
                    result = solution_func(input_data)
                
                execution_time = (time.time() - start_time) * 1000
                current, peak_memory = tracemalloc.get_traced_memory()
                tracemalloc.stop()
                memory_mb = peak_memory / 1024 / 1024
                
                correctness = '‚úì' if result == expected else '‚úó'
                error_msg = None
                
            except Exception as e:
                tracemalloc.stop()
                execution_time = (time.time() - start_time) * 1000
                error_msg = f"{type(e).__name__}: {str(e)}"
                correctness = 'ERROR'
                print(f"   –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {i}: {error_msg}")
            
            test_result = {
                '–ó–∞–¥–∞—á–∞': task_name,
                '–¢–µ—Å—Ç': i,
                '–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ': str(input_data)[:50],
                '–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç': str(expected)[:30],
                '–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç': str(result)[:30] if result is not None else "None",
                '–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å': correctness,
                '–í—Ä–µ–º—è (–º—Å)': f"{execution_time:.2f}",
                '–ü–∞–º—è—Ç—å (–ú–±)': f"{memory_mb:.4f}",
                '–û—à–∏–±–∫–∞': error_msg
            }
            
            all_results.append(test_result)
            
            status_icon = '‚úì' if correctness == '‚úì' else '‚úó' if correctness == '‚úó' else 'üí•'
            print(f"–¢–µ—Å—Ç {i}: {status_icon} | –í—Ä–µ–º—è: {execution_time:.2f}–º—Å | –ü–∞–º—è—Ç—å: {memory_mb:.4f}–ú–±")
    
    print(f"\n{'='*80}")
    print("üìã –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print(f"{'='*80}")
    
    if all_results:
        df = pd.DataFrame(all_results)
        
        display_columns = ['–¢–µ—Å—Ç', '–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 
                          '–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–í—Ä–µ–º—è (–º—Å)', '–ü–∞–º—è—Ç—å (–ú–±)']
        
        available_columns = [col for col in display_columns if col in df.columns]
        
        if available_columns:
            print(df[available_columns].to_string(index=False, max_colwidth=25))
        else:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        return df
    else:
        return pd.DataFrame()